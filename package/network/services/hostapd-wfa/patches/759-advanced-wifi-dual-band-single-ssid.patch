Index: hostapd-2022-01-16-cff80b4f/hostapd/config_file.c
===================================================================
--- hostapd-2022-01-16-cff80b4f.orig/hostapd/config_file.c
+++ hostapd-2022-01-16-cff80b4f/hostapd/config_file.c
@@ -3372,6 +3372,8 @@ static int hostapd_config_fill(struct ho
 			conf->preamble = LONG_PREAMBLE;
 	} else if (os_strcmp(buf, "ignore_broadcast_ssid") == 0) {
 		bss->ignore_broadcast_ssid = atoi(pos);
+	} else if (os_strcmp(buf, "conditionally_ignore_bcast_ssid") == 0) {
+		bss->conditionally_ignore_bcast_ssid = atoi(pos);
 	} else if (os_strcmp(buf, "no_probe_resp_if_max_sta") == 0) {
 		bss->no_probe_resp_if_max_sta = atoi(pos);
 #ifdef CONFIG_WEP
Index: hostapd-2022-01-16-cff80b4f/src/ap/ap_config.h
===================================================================
--- hostapd-2022-01-16-cff80b4f.orig/src/ap/ap_config.h
+++ hostapd-2022-01-16-cff80b4f/src/ap/ap_config.h
@@ -460,6 +460,7 @@ struct hostapd_bss_config {
 
 	int ap_max_inactivity;
 	int ignore_broadcast_ssid;
+	int conditionally_ignore_bcast_ssid;
 	int no_probe_resp_if_max_sta;
 
 	int wmm_enabled;
Index: hostapd-2022-01-16-cff80b4f/src/ap/ubus.c
===================================================================
--- hostapd-2022-01-16-cff80b4f.orig/src/ap/ubus.c
+++ hostapd-2022-01-16-cff80b4f/src/ap/ubus.c
@@ -30,6 +30,7 @@
 static struct ubus_context *ctx;
 static struct blob_buf b;
 static int ctx_ref;
+static uint32_t sf_adv_wl_wifi_ap_id = 0;
 
 static inline struct hapd_interfaces *get_hapd_interfaces_from_object(struct ubus_object *obj)
 {
@@ -288,6 +289,7 @@ hostapd_bss_get_clients(struct ubus_cont
 			struct blob_attr *msg)
 {
 	struct hostapd_data *hapd = container_of(obj, struct hostapd_data, ubus.obj);
+	struct hostap_sta_driver_data data;
 	struct hostap_sta_driver_data sta_driver_data;
 	struct sta_info *sta;
 	void *list, *c;
@@ -337,6 +339,9 @@ hostapd_bss_get_clients(struct ubus_cont
 		blobmsg_close_array(&b, r);
 
 		blobmsg_add_u32(&b, "aid", sta->aid);
+		if (hapd->conf->conditionally_ignore_bcast_ssid)
+			if (hostapd_drv_read_sta_data(hapd, &data, sta->addr) == 0)
+				blobmsg_add_u32(&b, "signal", data.signal);
 #ifdef CONFIG_TAXONOMY
 		r = blobmsg_alloc_string_buffer(&b, "signature", 1024);
 		if (retrieve_sta_taxonomy(hapd, sta, r, 1024) > 0)
@@ -1850,6 +1855,20 @@ if (hapd->iconf->sf_mm) {
 	obj->n_methods = bss_object_type.n_methods;
 	ret = ubus_add_object(ctx, obj);
 	hostapd_ubus_ref_inc();
+	if (hapd->conf->conditionally_ignore_bcast_ssid) {
+		if(!ubus_lookup_id(ctx, "sf_adv_wl_wifi_ap", &sf_adv_wl_wifi_ap_id)) {
+			blob_buf_init(&b, 0);
+			blobmsg_add_u32(&b, "id", obj->id);
+			blobmsg_add_u32(&b, "band",
+				hapd->iconf->hw_mode == HOSTAPD_MODE_IEEE80211A);
+			blobmsg_add_u32(&b, "freq", hapd->iface->freq);
+			blobmsg_add_string(&b, "mac", hapd->conf->bssid);
+			blobmsg_add_string(&b, "ssid", (&hapd->conf->ssid)->ssid);
+			//3 seconds for timeout
+			ubus_invoke(ctx, sf_adv_wl_wifi_ap_id,
+					"wifi_ap_connect", b.head, NULL, 0, 3000);
+		}
+	}
 
 	hostapd_send_shared_event(&hapd->iface->interfaces->ubus, hapd->conf->iface, "add");
 }
@@ -1867,6 +1886,14 @@ void hostapd_ubus_free_bss(struct hostap
 
 	if (!ctx)
 		return;
+	if (hapd->conf->conditionally_ignore_bcast_ssid) {
+		if (!ubus_lookup_id(ctx, "sf_adv_wl_wifi_ap", &sf_adv_wl_wifi_ap_id)) {
+			blob_buf_init(&b, 0);
+			blobmsg_add_u32(&b, "id", obj->id);
+			ubus_invoke(ctx, sf_adv_wl_wifi_ap_id,
+					"wifi_ap_remove", b.head, NULL, 0, 3000);
+		}
+	}
 
 	hostapd_send_shared_event(&hapd->iface->interfaces->ubus, hapd->conf->iface, "remove");
 
@@ -1976,6 +2003,19 @@ ubus_event_cb(struct ubus_notify_request
 	ureq->resp = ret;
 }
 
+static void wifi_ap_probe_req_cb(struct ubus_request *req, int type, struct blob_attr *msg)
+{
+	struct blob_attr *tb[1];
+	const struct blobmsg_policy probe_req_policy[] = {
+		{ .name = "ret", .type = BLOBMSG_TYPE_INT32 },
+	};
+
+	blobmsg_parse(probe_req_policy, ARRAY_SIZE(probe_req_policy), tb, blob_data(msg), blob_len(msg));
+
+	*(int *)req->priv = blobmsg_get_u32(tb[0]);
+}
+
+
 int hostapd_ubus_handle_event(struct hostapd_data *hapd, struct hostapd_ubus_request *req)
 {
 	struct ubus_banned_client *ban;
@@ -1987,6 +2027,7 @@ int hostapd_ubus_handle_event(struct hos
 	const char *type = "mgmt";
 	struct ubus_event_req ureq = {};
 	const u8 *addr;
+	int ret = 0;
 
 	if (req->mgmt_frame)
 		addr = req->mgmt_frame->sa;
@@ -2015,9 +2056,38 @@ int hostapd_ubus_handle_event(struct hos
 		}
 	}
 
+	if (hapd->conf->conditionally_ignore_bcast_ssid
+				&& req->type == HOSTAPD_UBUS_PROBE_REQ) {
+		if (ctx && !ubus_lookup_id(ctx, "sf_adv_wl_wifi_ap", &sf_adv_wl_wifi_ap_id)) {
+			blob_buf_init(&b, 0);
+			blobmsg_add_macaddr(&b, "address", addr);
+			if (req->mgmt_frame)
+				blobmsg_add_macaddr(&b, "target", req->mgmt_frame->da);
+			if (req->ssi_signal)
+				blobmsg_add_u32(&b, "signal", req->ssi_signal);
+			blobmsg_add_u32(&b, "freq", hapd->iface->freq);
+			blobmsg_add_u32(&b, "objid", (&hapd->ubus.obj)->id);
+			ubus_invoke(ctx, sf_adv_wl_wifi_ap_id,
+					"wifi_ap_probe_req", b.head,
+					wifi_ap_probe_req_cb, &ret, 1000);
+
+			if (ret == UBUS_STATUS_UNKNOWN_ERROR) {
+				/* bss not found */
+				blob_buf_init(&b, 0);
+				blobmsg_add_u32(&b, "id", (&hapd->ubus.obj)->id);
+				blobmsg_add_u32(&b, "band",
+						hapd->iconf->hw_mode == HOSTAPD_MODE_IEEE80211A);
+				blobmsg_add_u32(&b, "freq", hapd->iface->freq);
+				blobmsg_add_string(&b, "mac", hapd->conf->bssid);
+				blobmsg_add_string(&b, "ssid", (&hapd->conf->ssid)->ssid);
+				ubus_invoke(ctx, sf_adv_wl_wifi_ap_id,
+						"wifi_ap_connect", b.head, NULL, 0, 1000);
+			}
+		}
+	}
 
 	if (!hapd->ubus.obj.has_subscribers)
-		return WLAN_STATUS_SUCCESS;
+		goto out;
 
 	if (req->type < ARRAY_SIZE(types))
 		type = types[req->type];
@@ -2077,13 +2147,16 @@ int hostapd_ubus_handle_event(struct hos
 	}
 
 	if (ubus_notify_async(ctx, &hapd->ubus.obj, type, b.head, &ureq.nreq))
-		return WLAN_STATUS_SUCCESS;
+		goto out;
 
 	ureq.nreq.status_cb = ubus_event_cb;
 	ubus_complete_request(ctx, &ureq.nreq.req, 100);
 
 	if (ureq.resp)
 		return ureq.resp;
+out:
+	if (hapd->conf->conditionally_ignore_bcast_ssid)
+		return ret;
 
 	return WLAN_STATUS_SUCCESS;
 }
