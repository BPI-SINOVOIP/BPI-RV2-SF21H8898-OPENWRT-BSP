--- a/src/ap/acs.c
+++ b/src/ap/acs.c
@@ -21,7 +21,7 @@
 #include "ap_config.h"
 #include "hw_features.h"
 #include "acs.h"
-
+#include "utils/eloop.h"
 /*
  * Automatic Channel Selection
  * ===========================
@@ -649,7 +649,7 @@ acs_find_ideal_chan_mode(struct hostapd_
 			 int n_chans, u32 bw,
 			 struct hostapd_channel_data **rand_chan,
 			 struct hostapd_channel_data **ideal_chan,
-			 long double *ideal_factor)
+			 long double *ideal_factor, u8 acs_chan_last_chan)
 {
 	struct hostapd_channel_data *chan, *adj_chan = NULL;
 	long double factor;
@@ -719,6 +719,16 @@ acs_find_ideal_chan_mode(struct hostapd_
 			}
 		}
 
+		if(acs_chan_last_chan && acs_chan_last_chan == chan->chan)
+		{
+			//current channel(last channel) is not busy enouth to have to change it
+			if(iface->conf->acs_chan_busy_per && (chan->interference_factor * 100) < iface->conf->acs_chan_busy_per)
+			{
+				*ideal_chan = chan;
+				break;
+			}
+		}
+
 		factor = 0;
 		if (acs_usable_chan(chan))
 			factor = chan->interference_factor;
@@ -789,7 +799,15 @@ acs_find_ideal_chan_mode(struct hostapd_
 		factor /= total_weight;
 
 		bias = NULL;
-		if (iface->conf->acs_chan_bias) {
+		if(acs_chan_last_chan)
+		{
+			if(acs_chan_last_chan == chan->chan)
+			{
+				tmp_bias.channel = chan->chan;
+				tmp_bias.bias = (45 - iface->conf->acs_chan_bet_per) / 45.0;
+				bias = &tmp_bias;
+			}
+		} else if (iface->conf->acs_chan_bias) {
 			for (k = 0; k < iface->conf->num_acs_chan_bias; k++) {
 				bias = &iface->conf->acs_chan_bias[k];
 				if (bias->channel == chan->chan)
@@ -881,14 +899,42 @@ bw_selected:
 	wpa_printf(MSG_DEBUG,
 		   "ACS: Survey analysis for selected bandwidth %d MHz", bw);
 
-	for (i = 0; i < iface->num_hw_features; i++) {
-		mode = &iface->hw_features[i];
-		if (!hostapd_hw_skip_mode(iface, mode))
-			acs_find_ideal_chan_mode(iface, mode, n_chans, bw,
-						 &rand_chan, &ideal_chan,
-						 &ideal_factor);
+	FILE *channel_file = NULL;
+	u8 acs_chan_last_chan = 0;
+	char buf[8];
+	if(iface->conf->acs_chan_dynamic_select_enable)
+	{
+		if (iface->current_mode->mode == HOSTAPD_MODE_IEEE80211G)
+			channel_file = fopen("/var/run/24g.channel", "r");
+		else
+			channel_file = fopen("/var/run/5g.channel", "r");
+	}
+
+	if (channel_file)
+	{
+		fgets(buf, sizeof(buf), channel_file);
+		fclose(channel_file);
+		acs_chan_last_chan = atoi((char *)&buf);
 	}
 
+/* the under code is original in master version,please use it when you need.
+ *	for (i = 0; i < iface->num_hw_features; i++) {
+ *		mode = &iface->hw_features[i];
+ *		if (!hostapd_hw_skip_mode(iface, mode))
+ *			acs_find_ideal_chan_mode(iface, mode, n_chans, bw,
+ *						 &rand_chan, &ideal_chan,
+ *						 &ideal_factor);
+ *	}
+ */
+
+// the code in 18.06 version now is encapsulated in function acs_find_ideal_chan_mode()
+// add a parameter acs_chan_last_chan and call the function, you can change the number of parameter when you need.
+	mode = &iface->current_mode;
+	acs_find_ideal_chan_mode(iface, mode, n_chans, bw,
+				&rand_chan, &ideal_chan,
+				&ideal_factor, acs_chan_last_chan);
+//end
+
 	if (ideal_chan) {
 		wpa_printf(MSG_DEBUG, "ACS: Ideal channel is %d (%d MHz) with total interference factor of %Lg",
 			   ideal_chan->chan, ideal_chan->freq, ideal_factor);
@@ -1141,3 +1187,19 @@ enum hostapd_chan_status acs_init(struct
 
 	return HOSTAPD_CHAN_ACS;
 }
+
+void ap_dynamic_select_channel_timeout(void *eloop_ctx, void *timeout_ctx)
+{
+	struct hostapd_data *hapd = eloop_ctx;
+
+	//if have sta connection,and switch_channel_even_have_sta_enable false,return
+	if(!hapd->iconf->switch_channel_even_have_sta_enable && hapd->num_sta > 0)
+	{
+		eloop_register_timeout(hapd->iconf->acs_chan_dynamic_select_period * 60, 0,
+				       ap_dynamic_select_channel_timeout, hapd, NULL);
+		return;
+	}
+
+	eloop_terminate();
+	return;
+}
--- a/src/ap/acs.h
+++ b/src/ap/acs.h
@@ -14,6 +14,7 @@
 
 enum hostapd_chan_status acs_init(struct hostapd_iface *iface);
 void acs_cleanup(struct hostapd_iface *iface);
+void ap_dynamic_select_channel_timeout(void *eloop_ctx, void *timeout_ctx);
 
 #else /* CONFIG_ACS */
 
@@ -27,6 +28,12 @@ static inline void acs_cleanup(struct ho
 {
 }
 
+void ap_dynamic_select_channel_timeout(void *eloop_ctx, void *timeout_ctx)
+{
+	wpa_printf(MSG_ERROR, "ACS was disabled on your build, rebuild hostapd with CONFIG_ACS=y or set channel");
+	return;
+}
+
 #endif /* CONFIG_ACS */
 
 #endif /* ACS_H */
--- a/src/ap/ap_config.c
+++ b/src/ap/ap_config.c
@@ -264,6 +264,11 @@ struct hostapd_config * hostapd_config_d
 	conf->acs_ch_list.num = 0;
 #ifdef CONFIG_ACS
 	conf->acs_num_scans = 5;
+	conf->acs_chan_dynamic_select_enable = 0;
+	conf->acs_chan_dynamic_select_period = 8;
+	conf->switch_channel_even_have_sta_enable = 0;
+	conf->acs_chan_busy_per = 50;
+	conf->acs_chan_bet_per = 20;
 #endif /* CONFIG_ACS */
 
 #ifdef CONFIG_IEEE80211AX
--- a/src/ap/hostapd.c
+++ b/src/ap/hostapd.c
@@ -2279,6 +2279,10 @@ dfs_offload:
 
 	for (j = 0; j < iface->num_bss; j++)
 		hostapd_neighbor_set_own_report(iface->bss[j]);
+	//setup of interface done,if user have dynamic channel select enable,loop a timer
+	if(hapd->iconf->acs_chan_dynamic_select_enable)
+		eloop_register_timeout(hapd->iconf->acs_chan_dynamic_select_period * 60, 0,
+			ap_dynamic_select_channel_timeout, hapd, NULL);
 
 	return 0;
 
--- a/src/ap/hw_features.c
+++ b/src/ap/hw_features.c
@@ -1043,6 +1043,18 @@ int hostapd_acs_completed(struct hostapd
 		wpa_msg(iface->bss[0]->msg_ctx, MSG_INFO,
 			ACS_EVENT_COMPLETED "freq=%d channel=%d",
 			iface->freq, iface->conf->channel);
+		//write valid channel to /var/run/24g.channel /var/run/5g.channel
+		FILE *channel_file = NULL;
+		if (iface->current_mode->mode == HOSTAPD_MODE_IEEE80211G)
+			channel_file = fopen("/var/run/24g.channel", "w+");
+		else
+			channel_file = fopen("/var/run/5g.channel", "w+");
+
+		if (channel_file)
+		{
+			fprintf(channel_file,"%d\n",iface->conf->channel);
+			fclose(channel_file);
+		}
 		break;
 	case HOSTAPD_CHAN_ACS:
 		wpa_printf(MSG_ERROR, "ACS error - reported complete, but no result available");
--- a/src/ap/ap_config.h
+++ b/src/ap/ap_config.h
@@ -1064,6 +1064,11 @@ struct hostapd_config {
 		double bias;
 	} *acs_chan_bias;
 	unsigned int num_acs_chan_bias;
+	int acs_chan_dynamic_select_enable;
+	unsigned int acs_chan_dynamic_select_period;
+	int switch_channel_even_have_sta_enable;
+	unsigned int acs_chan_busy_per;
+	unsigned int acs_chan_bet_per;
 #endif /* CONFIG_ACS */
 
 	int sta_min_dbm;
