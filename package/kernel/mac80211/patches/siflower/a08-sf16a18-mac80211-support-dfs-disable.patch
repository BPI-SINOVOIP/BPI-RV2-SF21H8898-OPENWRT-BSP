--- a/include/net/cfg80211.h
+++ b/include/net/cfg80211.h
@@ -136,6 +136,7 @@ enum ieee80211_channel_flags {
 	IEEE80211_CHAN_4MHZ		= 1<<16,
 	IEEE80211_CHAN_8MHZ		= 1<<17,
 	IEEE80211_CHAN_16MHZ		= 1<<18,
+	IEEE80211_CHAN_RADAR_BACKUP     = 1<<19,
 };
 
 #define IEEE80211_CHAN_NO_HT40 \
--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@ -7437,12 +7437,44 @@ static int nl80211_set_bss(struct sk_buf
 	return err;
 }
 
+/* to disable radar detection we can clean radar flags in channel_def. */
+static void reg_set_channel_no_dfs(bool rd_disabled)
+{
+       struct cfg80211_registered_device *rdev;
+       struct wiphy *wiphy;
+       enum nl80211_band band;
+       struct ieee80211_supported_band *sband;
+       unsigned int i;
+       struct ieee80211_channel *chan;
+
+       list_for_each_entry(rdev, &cfg80211_rdev_list, list) {
+               wiphy = &rdev->wiphy;
+               for (band = 0; band < NUM_NL80211_BANDS; band++)
+               {
+                       sband = wiphy->bands[band];
+                       if (!sband)
+                             continue;
+                       for (i = 0; i < sband->n_channels; i++)
+                       {
+                               chan = &sband->channels[i];
+                               /* IEEE80211_CHAN_RADAR is 1<<3 */
+                               if (rd_disabled)
+                                     chan->flags &= ~IEEE80211_CHAN_RADAR;
+                               else if (chan->flags & IEEE80211_CHAN_RADAR_BACKUP)
+                                     chan->flags |= IEEE80211_CHAN_RADAR;
+                       }
+               }
+       }
+}
+
 static int nl80211_req_set_reg(struct sk_buff *skb, struct genl_info *info)
 {
 	char *data = NULL;
 	bool is_indoor;
 	enum nl80211_user_reg_hint_type user_reg_hint_type;
 	u32 owner_nlportid;
+	int err;
+	bool rd_disabled = false;
 
 	/*
 	 * You should only get this when cfg80211 hasn't yet initialized
@@ -7458,6 +7490,9 @@ static int nl80211_req_set_reg(struct sk
 		  nla_get_u32(info->attrs[NL80211_ATTR_USER_REG_HINT_TYPE]);
 	else
 		user_reg_hint_type = NL80211_USER_REG_HINT_USER;
+	
+	if (info->attrs[NL80211_ATTR_DFS_CAC_TIME])
+		rd_disabled = true;	
 
 	switch (user_reg_hint_type) {
 	case NL80211_USER_REG_HINT_USER:
@@ -7467,6 +7502,9 @@ static int nl80211_req_set_reg(struct sk
 
 		data = nla_data(info->attrs[NL80211_ATTR_REG_ALPHA2]);
 		return regulatory_hint_user(data, user_reg_hint_type);
+	 err = regulatory_hint_user(data, user_reg_hint_type);
+	 reg_set_channel_no_dfs(rd_disabled);
+	 return err;
 	case NL80211_USER_REG_HINT_INDOOR:
 		if (info->attrs[NL80211_ATTR_SOCKET_OWNER]) {
 			owner_nlportid = info->snd_portid;
--- a/net/wireless/reg.c
+++ b/net/wireless/reg.c
@@ -1584,7 +1584,7 @@ static u32 map_regdom_flags(u32 rd_flags
 	if (rd_flags & NL80211_RRF_NO_IR_ALL)
 		channel_flags |= IEEE80211_CHAN_NO_IR;
 	if (rd_flags & NL80211_RRF_DFS)
-		channel_flags |= IEEE80211_CHAN_RADAR;
+		channel_flags |= (IEEE80211_CHAN_RADAR | IEEE80211_CHAN_RADAR_BACKUP);
 	if (rd_flags & NL80211_RRF_NO_OFDM)
 		channel_flags |= IEEE80211_CHAN_NO_OFDM;
 	if (rd_flags & NL80211_RRF_NO_OUTDOOR)
